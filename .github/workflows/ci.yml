name: Build and Push Common Service to GHCR

on:
  push:
    branches:
      - main
    paths:
      - '.github/**'
      - 'commonservice/**'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup java 21 temurin
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: temurin

      - name: Cache maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('commonservice/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build service jar
        working-directory: commonservice
        run: ./mvnw clean package -DskipTests

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push image to GHCR
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/commonservice
        run: |
          TAG=${GITHUB_SHA::8}
          docker build -t $IMAGE_NAME:$TAG commonservice/
          docker push $IMAGE_NAME:$TAG
          docker tag $IMAGE_NAME:$TAG $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest

      - name: Cleanup old GHCR tags (keep latest + current)
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
          REPO: commonservice
          OWNER: ${{ github.repository_owner }}
        run: |
          echo "Fetching tags from GHCR..."
          API_URL="https://api.github.com/users/${OWNER}/packages/container/${REPO}/versions"

          # Get package versions (excluding latest and current commit)
          PACKAGE_VERSIONS=$(curl -s -H "Authorization: Bearer $GHCR_PAT" -H "Accept: application/vnd.github.v3+json" "$API_URL" | \
            jq -r --arg CURRENT_TAG "${GITHUB_SHA::8}" '.[] | 
            select(.metadata.container.tags != null) | 
            select((.metadata.container.tags | index("latest") | not) and 
            ((.metadata.container.tags | index($CURRENT_TAG) | not) | 
            .id')

          # Delete old versions
          for id in $PACKAGE_VERSIONS; do
            echo "Deleting package version ID: $id"
            curl -X DELETE -H "Authorization: Bearer $GHCR_PAT" "$API_URL/$id"
          done
